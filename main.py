from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from defs import *
# from aiogram.api.methods import SendSticker
import mysql.connector


class Test(StatesGroup):
    Q1 = State()
    Q2 = State()
    Q3 = State()
    Q4 = State()
    Q5 = State()
    Q6 = State()
    Q7 = State()
    Q8 = State()
    Q9 = State()
    Q10 = State()
    Q11 = State()
    Q12 = State()
    Q13 = State()

async def isolation(message):
    global symptoms
    symptoms = '-'
    # print(message)
    # await bot.send_message(message.chat.id, f"–°–ø–∞—Å–∏–±–æ!")
    await message.answer(text="–¢–≤–æ—è –≥—Ä—É–ø–ø–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∫–µ?", reply_markup=inline())
    await Test.Q6.set()


async def question2(message):
    global first_q
    first_q = '-'
    await bot.send_message(message.chat.id, f"–ö–∞–∫ –¥–µ–ª–∞ —Å –Ω–∞—É–∫–æ–π?üî¨\n–ß–µ–º –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–Ω—è—Ç? –ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å?")
    await Test.Q9.set()


async def hello(message):
    global name
    name = (message['from'])['first_name']
    print(type(message))
    global surname
    surname = (message['from'])['last_name']
    global user_id
    user_id = int(message.chat.id)
    await bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {name}!\n–û—á–µ—Ä–µ–¥–Ω–æ–π –æ–ø—Ä–æ—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ ü¶æ")
    await covid(message)


bot = Bot(token='1415878352:AAEIda5qJbmYNTxYLBU1LcDiTYEz64a5dHo', parse_mode=types.ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


@dp.message_handler(Command("start"))
async def start_handlers(message: types.Message):
    await hello(message)


@dp.callback_query_handler(state=Test.Q4)
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
# async def inlin(call: types.CallbackQuery, state: ''):
    if callback_query.data == 'yes':
        await bot.send_message(callback_query.message.chat.id, '–ù–∞–ø–∏—à–∏ –∫–∞–∫–∏–µ —É —Ç–µ–±—è —Å–∏–º–ø—Ç–æ–º—ã, –∏ –º—ã –ø–æ–π–¥–µ–º –¥–∞–ª—å—à–µ?')
        await Test.Q5.set()
    elif callback_query.data == 'no':
        # await bot.answer_callback_query(callback_query.id, text='–ù–∞–∂–∞—Ç–∞ –≤—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞')
        await isolation(callback_query.message)


@dp.message_handler(state=Test.Q5)
async def answer_q3(message: types.Message, state:''):
    global symptoms
    symptoms = message.text
    await message.answer("–¢–≤–æ—è –≥—Ä—É–ø–ø–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∫–µ?", reply_markup=inline())
    await Test.Q6.set()


@dp.callback_query_handler(state=Test.Q6)
async def inlin(callback_query: types.CallbackQuery):
    global block_group
    if callback_query.data == 'yes':
        block_group = '+'
    elif callback_query.data == 'no':
        block_group = '-'
    print(block_group)
    await question1(callback_query.message)


@dp.callback_query_handler(state=Test.Q7)
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
# async def inlin(call: types.CallbackQuery, state: ''):
    if callback_query.data == 'yes':
        await bot.send_message(callback_query.message.chat.id, '–ù–∞–ø–∏—à–∏ –∫–∞–∫–∏–º–∏, –∏ –Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –æ–Ω–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è')
        await Test.Q8.set()
    elif callback_query.data == 'no':
        await bot.send_message(callback_query.message.chat.id, '–≠—Ç–æ –Ω–∞–¥–æ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å!ü§¨')

        # await bot.answer_callback_query(callback_query.id, text='–ù–∞–∂–∞—Ç–∞ –≤—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞')
        await question2(callback_query.message)


@dp.message_handler(state=Test.Q8)
async def answer_q3(message: types.Message, state:''):
    global first_q
    first_q = message.text
    await message.answer(f"–ö–∞–∫ –¥–µ–ª–∞ —Å –Ω–∞—É–∫–æ–π?üî¨\n–ß–µ–º –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–Ω—è—Ç? –ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å?")
    await Test.Q9.set()


@dp.message_handler(state=Test.Q9)
async def answer_q3(message: types.Message, state:''):
    global second_q
    second_q = message.text
    await message.answer("–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ?(–Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—à—å?)", reply_markup=inline())
    await Test.Q11.set()


@dp.callback_query_handler(state=Test.Q11)
async def inlin1(callback_query: types.CallbackQuery):
    global workplace
    global graphic
    if callback_query.data == 'yes':
        workplace = '+'
        graphic = '-'
        await work_place(callback_query.message)
    elif callback_query.data == 'no':
        workplace = '-'
        graphic = '-'
        await ending(callback_query.message)


async def ending(message):
    print(user_id, name, surname, block_group, symptoms, first_q, second_q, workplace, graphic)
    try:
        insert_sql('test', ('user_id, name, surname, group_irnitu, symptoms, first_q, second_q, workplace, graphic'),
                             [user_id, name, surname, block_group, symptoms, first_q, second_q, workplace, graphic])
        await bot.send_message(message.chat.id,
                               "–°–ø–∞—Å–∏–±–æ! üòÅ\n–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?")
        await Test.Q13.set()
    except Exception as e:
        print(e)
        await bot.send_message(message.chat.id, "‚ö†Ô∏è–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ!‚ö†Ô∏è \n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ /start")
        await Test.Q13.set()


async def work_place(message):
    await message.answer("–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ –∑–∞–º. –ø–æ –†—Å–ü, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."
                                            "(@pugachev1, https://vk.com/m.pugachyov2013)", reply_markup=inline1())
    await Test.Q12.set()


@dp.callback_query_handler(state=Test.Q12)
async def inlin(callback_query: types.CallbackQuery):
    global graphic
    if callback_query.data == 'yes':
        graphic = '+'
        await ending(callback_query.message)
    elif callback_query.data == 'no':
        graphic = '-'
        await ending(callback_query.message)


@dp.message_handler(state=Test.Q13)
async def answer_0o9(message: types.Message, state:''):
    quest = message.text
    print(type(quest))
    if quest.lower() == '–¥–∞' or quest.lower()  == 'yes':
        await bot.send_message(message.chat.id,
                               "–ü–∏—à–∏ üëáüèº\nTelegram: @pugachev1\nVK: https://vk.com/m.pugachyov2013")
    elif quest.lower() == '–Ω–µ—Ç' or quest.lower()  == 'no':
        await bot.send_message(message.chat.id,
                               "üëåüèº")
    else:
        await bot.send_message(message.chat.id,
                               "üåù")
    await state.finish()



executor.start_polling(dp, skip_updates=True)